"""
FastAPI Service Main Application Module

This module provides a simple FastAPI-based web service with two core endpoints:
- A root endpoint for service identification
- A health check endpoint for monitoring and diagnostics

The service is designed to be lightweight, containerizable, and suitable for
microservice architectures. It follows REST API conventions and provides
JSON responses for all endpoints.

Dependencies:
    - FastAPI: Modern, fast web framework for building APIs with Python
    - uvicorn: ASGI web server for production deployment
    - gunicorn: Python WSGI HTTP Server for UNIX systems

Example:
    To run the service locally:
        $ uvicorn app.main:app --reload
    
    To access the service:
        GET http://localhost:8000/
        GET http://localhost:8000/healthz

Author: Generated by GitHub Copilot
Created: August 23, 2025
"""

from fastapi import FastAPI

# Initialize FastAPI application instance
# This creates the main application object that handles HTTP requests and responses
app = FastAPI(
    title="FastAPI Service",
    description="A simple FastAPI service with health check and service info endpoints",
    version="1.0.0"
)


@app.get("/")
def root():
    """
    Root endpoint that provides basic service information.
    
    This endpoint serves as the main entry point for the service and returns
    identifying information about the application. It can be used to verify
    that the service is running and accessible.
    
    Returns:
        dict: A JSON object containing:
            - ok (bool): Always True, indicating the service is operational
            - service (str): The name identifier of the service
    
    Response Schema:
        {
            "ok": true,
            "service": "fastapi-service"
        }
    
    Status Codes:
        200: Successfully retrieved service information
    
    Example:
        >>> GET /
        >>> {
        >>>     "ok": true,
        >>>     "service": "fastapi-service"
        >>> }
    """
    return {"ok": True, "service": "fastapi-service"}


@app.get("/healthz")
def health():
    """
    Health check endpoint for monitoring and load balancer integration.
    
    This endpoint provides a standardized health check that can be used by:
    - Load balancers to determine if the service should receive traffic
    - Monitoring systems to track service availability
    - Container orchestration platforms (Kubernetes, Docker Swarm, etc.)
    - CI/CD pipelines for deployment verification
    
    The endpoint follows common health check conventions by using the "/healthz"
    path, which is a widely adopted standard in cloud-native applications.
    
    Returns:
        dict: A JSON object containing:
            - status (str): Always "healthy" when the service is operational
    
    Response Schema:
        {
            "status": "healthy"
        }
    
    Status Codes:
        200: Service is healthy and ready to serve requests
    
    Example:
        >>> GET /healthz
        >>> {
        >>>     "status": "healthy"
        >>> }
    
    Note:
        This is a simple health check that only verifies the web server is
        responding. In production applications, this endpoint might include
        additional checks for database connectivity, external service
        dependencies, or other critical components.
    """
    return {"status": "healthy"}

